{"version":3,"sources":["redux/exchangeReducer.js","redux/actions.js","redux/store.js","components/Input/Input.js","components/Output/Output.js","components/Switch/Switch.js","components/Graph/Graph.js","components/Exchange/Exchange.js","components/Exchange/ExchangeContainer.js","redux/actionCreators.js","components/App/App.js","index.js"],"names":["dateEnd","Date","dateStart","setMonth","getMonth","initialState","amountFrom","currencyFrom","currencyTo","amountTo","data","base","rates","endAt","concat","getYear","getDate","startAt","graph","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","exchangeReducer","state","arguments","length","undefined","action","type","Object","objectSpread","Math","round","date","obj","rate","push","sort","a","b","monthSwitch","countSwitch","countMonthData","months","i","month","reducers","combineReducers","exchangeComponent","store","createStore","useStyles","makeStyles","theme","root","display","flexWrap","formControl","margin","spacing","minWidth","selectEmpty","marginTop","Input","props","classes","option","react_default","createElement","className","TextField","id","label","placeholder","onChange","ev","target","value","inputAmountFrom","textField","variant","FormControl","InputLabel","htmlFor","Select","native","axios","then","response","console","log","outputAmountTo","inputCurrencyFrom","setGraph","input","FilledInput","name","key","map","Output","outputCurrencyTo","InputProps","readOnly","Switch","onClick","changeCurrencies","Graph","react_chartjs_2_es","width","height","options","legend","Exchange","_this","this","components_Input_Input","components_Switch_Switch","components_Output_Output","components_Graph_Graph","React","Component","connect","exchange","dispatch","AC","App","ExchangeContainer","render","es","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.6fd49cd3.chunk.js","sourcesContent":["import * as actions from \"./actions\"\r\n// Date for request\r\n// debugger\r\nlet dateEnd = new Date()\r\nlet dateStart = new Date()\r\ndateStart.setMonth(dateStart.getMonth() - 10)\r\nlet endAt = `${dateEnd.getYear()+1900}-${dateEnd.getMonth()+1}-${dateEnd.getDate()}`\r\nlet startAt = `${dateStart.getYear()+1900}-${dateStart.getMonth()+1}-${dateStart.getDate()}`\r\n\r\n\r\nconst initialState = {\r\n\tamountFrom: 100,\r\n\tcurrencyFrom: 'EUR',\r\n\tcurrencyTo: 'USD',\r\n\tamountTo: '',\r\n\tdata: {\r\n\t\tbase: 'EUR',\r\n\t\trates: null\r\n\t},\r\n\tendAt: endAt,\r\n\tstartAt: startAt,\r\n\tgraph: {\r\n\t\tdata: {\r\n\t\t\tlabels: [0],\r\n\t\t\tdatasets: [\r\n\t\t\t\t{\r\n\t\t\t\t\tfill: false,\r\n\t\t\t\t\tlineTension: 0.1,\r\n\t\t\t\t\tbackgroundColor: 'rgba(75,192,192,0.4)',\r\n\t\t\t\t\tborderColor: 'rgba(75,192,192,1)',\r\n\t\t\t\t\tborderCapStyle: 'butt',\r\n\t\t\t\t\tborderDash: [],\r\n\t\t\t\t\tborderDashOffset: 0.0,\r\n\t\t\t\t\tborderJoinStyle: 'miter',\r\n\t\t\t\t\tpointBorderColor: 'rgba(75,192,192,1)',\r\n\t\t\t\t\tpointBackgroundColor: '#fff',\r\n\t\t\t\t\tpointBorderWidth: 1,\r\n\t\t\t\t\tpointHoverRadius: 5,\r\n\t\t\t\t\tpointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n\t\t\t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\r\n\t\t\t\t\tpointHoverBorderWidth: 2,\r\n\t\t\t\t\tpointRadius: 1,\r\n\t\t\t\t\tpointHitRadius: 10,\r\n\t\t\t\t\tdata: [0]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst exchangeReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase actions.INPUT_AMOUNT_FROM:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tamountFrom: action.amountFrom,\r\n\t\t\t\tamountTo: Math.round(action.amountFrom * {...state}.data.rates[state.currencyTo] * 100) / 100\r\n\t\t\t}\r\n\t\tcase actions.INPUT_CURRENCY_FROM:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrencyFrom: action.currencyFrom,\r\n\t\t\t\tamountTo: Math.round({...state}.amountFrom * {...state}.data.rates[state.currencyTo] * 100) / 100\r\n\t\t\t}\r\n\t\tcase actions.OUTPUT_CURRENCY_TO:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrencyTo: action.currencyTo,\r\n\t\t\t\tamountTo: Math.round({...state}.amountFrom * {...state}.data.rates[action.currencyTo] * 100) / 100\r\n\t\t\t}\r\n\t\tcase actions.CHANGE_CURRENCIES:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrencyFrom: {...state}.currencyTo,\r\n\t\t\t\tcurrencyTo: {...state}.currencyFrom,\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tbase: {...state}.currencyFrom\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tcase actions.OUTPUT_AMOUNT_TO:\r\n\t\t\tif(action.data.rates[state.currencyTo]) return {\r\n\t\t\t\t...state,\r\n\t\t\t\tdata: {base: action.data.base, rates: action.data.rates},\r\n\t\t\t\tamountTo: Math.round({...state}.amountFrom * action.data.rates[state.currencyTo] * 100) / 100\r\n\t\t\t}\r\n\t\t\treturn state\r\n\t\tcase actions.SET_GRAPH:\r\n\t\t\t// SORT \r\n\t\t\tlet data = []\r\n\t\t\tfor (let date in action.data) {\r\n\t\t\t\tlet obj = {date, rate: action.data[date]}\r\n\t\t\t\tdata.push(obj)\r\n\t\t\t}\r\n\t\t\tdata.sort((a, b) => (new Date(a.date) - new Date(b.date)) )\r\n\t\t\t// SET\r\n\t\t\tlet graph = {...state}.graph\r\n\t\t\tgraph.data.labels = []\r\n\t\t\tgraph.data.datasets[0].data = []\r\n\t\t\tlet monthSwitch = new Date(data[0].date).getMonth()\r\n\t\t\tlet countSwitch = 0\r\n\t\t\tlet countMonthData = 0\r\n\t\t\tlet months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\t\t\t\r\n\t\t\tfor (let i=0; i<data.length; i++) {\r\n\t\t\t\tif(countMonthData < 5) {\r\n\t\t\t\t\tgraph.data.datasets[0].data.push(data[i].rate[{...state}.currencyTo])\r\n\t\t\t\t\tlet month = new Date(data[i].date).getMonth()\r\n\r\n\t\t\t\t\tif(month === monthSwitch && countSwitch === 0) {\r\n\t\t\t\t\t\tgraph.data.labels.push(months[month])\r\n\t\t\t\t\t\tcountSwitch ++\r\n\t\t\t\t\t\tmonthSwitch = month\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tgraph.data.labels.push('')\r\n\t\t\t\t\t\tif(month !== monthSwitch) {\r\n\t\t\t\t\t\t\tmonthSwitch = month\r\n\t\t\t\t\t\t\tcountSwitch = 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcountMonthData++\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet month = new Date(data[i].date).getMonth()\r\n\t\t\t\t\tif(month !== monthSwitch) countMonthData = 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tgraph: {\r\n\t\t\t\t\tdata: graph.data\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\nexport default exchangeReducer","export const INPUT_AMOUNT_FROM   = \"INPUT_AMOUNT_FROM\"\r\nexport const INPUT_CURRENCY_FROM = \"INPUT_CURRENCY_FROM\"\r\nexport const OUTPUT_CURRENCY_TO  = \"OUTPUT_CURRENCY_TO\"\r\nexport const OUTPUT_AMOUNT_TO    = \"OUTPUT_AMOUNT_TO\"\r\n\r\nexport const CHANGE_CURRENCIES   = \"CHANGE_CURRENCIES\"\r\n\r\nexport const SET_GRAPH           = \"SET_GRAPH\"","import { combineReducers, createStore } from 'redux'\r\nimport exchangeReducer from './exchangeReducer'\r\n\r\nconst reducers = combineReducers({\r\n\texchangeComponent: exchangeReducer\r\n})\r\n\r\nconst store = createStore(reducers)\r\n\r\nexport default store","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport FilledInput from '@material-ui/core/FilledInput'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport * as axios from 'axios'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}))\r\n\r\nconst Input = (props) => {\r\n\tconst classes = useStyles()\r\n\r\n\tconst inputAmountFrom = (ev) => {\r\n\t\tlet amountFrom = ev.target.value\r\n\t\tprops.inputAmountFrom(amountFrom)\r\n\t}\r\n\tconst inputCurrencyFrom = (ev) => {\r\n\t\tlet currencyFrom = ev.target.value\r\n\t\taxios.get(`https://api.exchangeratesapi.io/latest?base=${currencyFrom}`)\r\n\t\t\t .then(response => {\r\n\t\t\t \tconsole.log(response.data)\r\n\t\t\t \t  \r\n\t\t\t \t props.outputAmountTo(response.data)\r\n\t\t\t }\r\n\t\t).then(props.inputCurrencyFrom(currencyFrom))\r\n\t\t\r\n\t\t// Change graph\r\n\t\taxios.get(`https://api.exchangeratesapi.io/history?start_at=${props.startAt}&end_at=${props.endAt}&base=${currencyFrom}&symbols=${props.currencyTo}`)\r\n\t\t\t .then(response => {\r\n\t\t\t     props.setGraph(response.data.rates)\r\n\t\t\t }\r\n\t\t)\r\n\t}\r\n\r\n\tlet rates = []\r\n\tfor (let option in props.data.rates) {\r\n\t\trates.push(option)\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"input\">\r\n\t\t\t<TextField\r\n\t\t        id=\"filled-with-placeholder\"\r\n\t\t        label=\"Amount from\"\r\n\t\t        placeholder=\"Put down an amount\"\r\n\t\t        onChange={inputAmountFrom}\r\n\t\t        className={classes.textField}\r\n\t\t        margin=\"dense\"\r\n\t\t        variant=\"filled\"\r\n\t\t        value={props.amountFrom}\r\n\t\t    />\r\n\t\t\t{\r\n\t\t\t\t<FormControl variant=\"filled\" className={classes.formControl}>\r\n\t\t\t        <InputLabel htmlFor=\"filled-age-native-simple\">Currency from</InputLabel>\r\n\t\t\t        <Select\r\n\t\t\t            native\r\n\t\t\t            value={props.currencyFrom}\r\n\t\t\t            onChange={inputCurrencyFrom}\r\n\t\t\t            margin=\"dense\"\r\n\t\t\t            input={<FilledInput name=\"age\" id=\"filled-age-native-simple\" />}\r\n\t\t\t        >\r\n\t\t\t        <option key={props.data.base} value={props.data.base}>\r\n\t\t\t            {props.data.base}\r\n\t\t\t        </option>\r\n\t\t            {\t\r\n\t\t            \t\r\n\t\t\t        \trates.map(option => {\r\n\t\t\t        \t\tif(option !== props.data.base) {\r\n\t\t\t        \t\t\treturn <option key={option} value={option}>\r\n\t\t\t\t\t\t            {option}\r\n\t\t\t\t\t\t        </option>\r\n\t\t\t\t\t\t    } else return null\r\n\t\t\t\t\t\t})\r\n\t\t\t        }\r\n\t\t\t        </Select>\r\n\t\t\t    </FormControl>\r\n\t\t    }\r\n\t\t</div>\r\n\t)\r\n}\r\n// <input onChange={inputAmountFrom} value={props.amountFrom} type=\"text\" placeholder=\"Amount from\"/>\r\nexport default Input","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport FilledInput from '@material-ui/core/FilledInput'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport * as axios from 'axios'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}))\r\n\r\nconst Output = (props) => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst outputCurrencyTo = (ev) => {\r\n\t\tlet currencyTo = ev.target.value\r\n\t\t// Change graph\r\n\t\taxios.get(`https://api.exchangeratesapi.io/history?start_at=${props.startAt}&end_at=${props.endAt}&base=${props.currencyFrom}&symbols=${currencyTo}`)\r\n\t\t\t .then(response => {\r\n\t\t\t     props.setGraph(response.data.rates)\r\n\t\t\t })\r\n\t\t\t .then(props.outputCurrencyTo(currencyTo))\r\n\t}\r\n\tlet rates = []\r\n\tfor (let option in props.data.rates) {\r\n\t\trates.push(option)\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"output\">\r\n\t\t\t{\r\n\t\t\t\t<FormControl variant=\"filled\" className={classes.formControl}>\r\n\t\t\t        <InputLabel htmlFor=\"filled-age-native-simple\">Currency to</InputLabel>\r\n\t\t\t        <Select\r\n\t\t\t            native\r\n\t\t\t            value={props.currencyTo}\r\n\t\t\t            onChange={outputCurrencyTo}\r\n\t\t\t            margin=\"dense\"\r\n\t\t\t            input={<FilledInput id=\"filled-age-native-simple\" />}\r\n\t\t\t        >\r\n\t\t\t        <option key={props.currencyTo} value={props.currencyTo}>\r\n\t\t\t            {props.currencyTo}\r\n\t\t\t        </option>\r\n\t\t            {\t\r\n\t\t            \t\r\n\t\t\t        \trates.map(option => {\r\n\t\t\t        \t\tif(option !== props.currencyTo) {\r\n\t\t\t        \t\t\treturn <option key={option} value={option}>\r\n\t\t\t\t\t\t            {option}\r\n\t\t\t\t\t\t        </option>\r\n\t\t\t\t\t\t    } else return null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t        )\r\n\t\t\t        }\r\n\t\t\t        </Select>\r\n\t\t\t    </FormControl>\r\n\t\t    }\r\n\t\t\t<TextField\r\n\t\t        id=\"filled-with-placeholder\"\r\n\t\t        label=\"Amount to\"\r\n\t\t        placeholder=\"\"\r\n\t\t        className={classes.textField}\r\n\t\t        margin=\"dense\"\r\n\t\t        variant=\"filled\"\r\n\t\t        value={props.amountTo}\r\n\t\t        InputProps={{\r\n\t\t            readOnly: true,\r\n\t\t        }}\r\n\t\t    />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// <input onChange={outputCurrencyTo} value={props.currencyTo} type=\"text\" placeholder=\"Currency to\"/>\r\n\r\nexport default Output","import React from 'react'\r\nimport * as axios from 'axios'\r\n\r\nconst Switch = (props) => {\r\n\tconst changeCurrencies = () => {\r\n\t\taxios.get(`https://api.exchangeratesapi.io/latest?base=${props.currencyTo}`)\r\n\t\t\t .then(response => {\r\n\t\t\t \t props.outputAmountTo(response.data)\r\n\t\t\t }\r\n\t\t).then(props.changeCurrencies())\r\n\r\n\t\t// Change graph\r\n\t\taxios.get(`https://api.exchangeratesapi.io/history?start_at=${props.startAt}&end_at=${props.endAt}&base=${props.currencyTo}&symbols=${props.currencyFrom}`)\r\n\t\t\t .then(response => {\r\n\t\t     \t props.setGraph(response.data.rates)\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<button onClick={changeCurrencies} type=\"button\" value=\"Change currencies\"><i className=\"fas fa-arrows-alt-h\"></i></button>\r\n\t)\r\n}\r\nexport default Switch","import React from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst Graph = (props) => {\r\n\treturn (\r\n\t\t<div className=\"graph\">\r\n\t        <Line width={100} height={20} data={props.graph.data} options={{\r\n\t        \tlegend: {\r\n\t\t            display: false\r\n\t\t        },\r\n\t        }}/>\r\n\t    </div>\r\n\t)\r\n}\r\nexport default Graph\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import * as axios from 'axios'\r\n\r\n// const data = {\r\n// \tlabels: [0],\r\n// \tdatasets: [\r\n// \t\t{\r\n// \t\t\tfill: false,\r\n// \t\t\tlineTension: 0.1,\r\n// \t\t\tbackgroundColor: 'rgba(75,192,192,0.4)',\r\n// \t\t\tborderColor: 'rgba(75,192,192,1)',\r\n// \t\t\tborderCapStyle: 'butt',\r\n// \t\t\tborderDash: [],\r\n// \t\t\tborderDashOffset: 0.0,\r\n// \t\t\tborderJoinStyle: 'miter',\r\n// \t\t\tpointBorderColor: 'rgba(75,192,192,1)',\r\n// \t\t\tpointBackgroundColor: '#fff',\r\n// \t\t\tpointBorderWidth: 1,\r\n// \t\t\tpointHoverRadius: 5,\r\n// \t\t\tpointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n// \t\t\tpointHoverBorderColor: 'rgba(220,220,220,1)',\r\n// \t\t\tpointHoverBorderWidth: 2,\r\n// \t\t\tpointRadius: 1,\r\n// \t\t\tpointHitRadius: 10,\r\n// \t\t\tdata: [0]\r\n// \t\t}\r\n// \t]\r\n// }\r\n\r\n// let date = new Date()\r\n// let endAt = `${date.getYear()+1900}-${date.getMonth()+1}-${date.getDate()}`\r\n// date.setMonth(date.getMonth() - 10)\r\n// let startAt = `${date.getYear()+1900}-${date.getMonth()+1}-${date.getDate()}`\r\n\r\n\r\n// axios.get(`https://api.exchangeratesapi.io/history?start_at=${startAt}&end_at=${endAt}&symbols=USD`)\r\n// \t .then(response => {\r\n// \t \tsortData(response.data.rates)\r\n// \t }\r\n// )\r\n\r\n// const sortData = (response) => {\r\n// \tlet data = []\r\n// \tfor (let date in response) {\r\n// \t\tlet obj = {date, rate: response[date]}\r\n// \t\tdata.push(obj)\r\n// \t}\r\n// \tdata.sort((a, b) => (new Date(a.date) - new Date(b.date)) )\r\n// \tsetData(data)\r\n// }\r\n\r\n// const setData = (response) => {\r\n// \tdata.labels = []\r\n// \tdata.datasets[0].data = []\r\n// \tlet monthSwitch = new Date(response[0].date).getMonth()\r\n// \tlet countSwitch = 0\r\n// \tlet countMonthData = 0\r\n// \tlet months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\t\r\n// \t// debugger\r\n// \tfor (let i=0; i<response.length; i++) {\r\n// \t\tif(countMonthData < 5) {\r\n// \t\t\tdata.datasets[0].data.push(response[i].rate['USD'])\r\n// \t\t\tlet month = new Date(response[i].date).getMonth()\r\n\r\n// \t\t\tif(month === monthSwitch && countSwitch === 0) {\r\n// \t\t\t\tdata.labels.push(months[month])\r\n// \t\t\t\tcountSwitch ++\r\n// \t\t\t\tmonthSwitch = month\r\n// \t\t\t} else {\r\n// \t\t\t\tdata.labels.push('')\r\n// \t\t\t\tif(month !== monthSwitch) {\r\n// \t\t\t\t\tmonthSwitch = month\r\n// \t\t\t\t\tcountSwitch = 0\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t\tcountMonthData++\r\n// \t\t} else {\r\n// \t\t\tlet month = new Date(response[i].date).getMonth()\r\n// \t\t\tif(month !== monthSwitch) countMonthData = 0\r\n// \t\t}\r\n// \t}\r\n// \treturn data\r\n// }\r\n\r\n\r\n// const getData = () => {\r\n// \taxios.get(`https://api.exchangeratesapi.io/history?start_at=2019-01-01&end_at=2019-05-01&symbols=USD`)\r\n// \t\t .then(response => {\r\n// \t\t \tsortData(response.data.rates)\r\n// \t\t }\r\n// \t)\r\n// \treturn data\r\n// }\r\n// console.log(data)","import React from 'react'\r\nimport Input from '../Input/Input.js'\r\nimport Output from '../Output/Output'\r\nimport Switch from '../Switch/Switch'\r\nimport Graph from '../Graph/Graph'\r\nimport * as axios from 'axios'\r\n\r\nclass Exchange extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\taxios.get(`https://api.exchangeratesapi.io/latest?base=${this.props.currencyFrom}`)\r\n\t\t\t .then(response => {\r\n\t\t\t \t this.props.outputAmountTo(response.data)\r\n\t\t\t }\r\n\t\t)\r\n\t\t// Change graph\r\n\t\taxios.get(`https://api.exchangeratesapi.io/history?start_at=${this.props.startAt}&end_at=${this.props.endAt}&base=${this.props.currencyFrom}&symbols=${this.props.currencyTo}`)\r\n\t\t\t .then(response => {\r\n\t\t\t     this.props.setGraph(response.data.rates)\r\n\t\t\t }\r\n\t\t)\r\n\t}\r\n\t\r\n\t\r\n\trender() {\r\n\t\tlet props = this.props\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='exchange'>\r\n\t\t\t\t\t<Input inputAmountFrom={props.inputAmountFrom}\r\n\t\t\t\t\t\t   amountFrom={props.amountFrom}\r\n\t\t\t\t\t\t   inputCurrencyFrom={props.inputCurrencyFrom}\r\n\t\t\t\t\t\t   currencyFrom={props.currencyFrom}\r\n\t\t\t\t\t\t   outputAmountTo={props.outputAmountTo}\r\n\t\t\t\t\t\t   data={props.data}\r\n\t\t\t\t\t\t   currencyTo={props.currencyTo}\r\n\t\t\t\t\t\t   endAt={props.endAt}\r\n\t\t\t\t\t\t   startAt={props.startAt}\r\n\t\t\t\t\t\t   setGraph={props.setGraph}/>\r\n\r\n\t\t\t\t\t<Switch changeCurrencies={props.changeCurrencies}\r\n\t\t\t\t\t        currencyTo={props.currencyTo}\r\n\t\t\t\t\t        currencyFrom={props.currencyFrom}\r\n\t\t\t\t\t        outputAmountTo={props.outputAmountTo}\r\n\t\t\t\t\t        endAt={props.endAt}\r\n\t\t\t\t\t\t    startAt={props.startAt}\r\n\t\t\t\t\t\t    setGraph={props.setGraph}/>\r\n\r\n\t\t\t\t\t<Output outputCurrencyTo={props.outputCurrencyTo}\r\n\t\t\t\t\t\t\toutputAmountTo={props.outputAmountTo}\r\n\t\t\t\t\t\t    currencyTo={props.currencyTo}\r\n\t\t\t\t\t\t    currencyFrom={props.currencyFrom}\r\n\t\t\t\t\t\t    amountTo={props.amountTo}\r\n\t\t\t\t\t\t    data={props.data}\r\n\t\t\t\t\t\t    endAt={props.endAt}\r\n\t\t\t\t\t\t    startAt={props.startAt}\r\n\t\t\t\t\t\t    setGraph={props.setGraph}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Graph graph={props.graph}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Exchange","import { connect } from 'react-redux'\r\nimport Exchange from \"./Exchange\"\r\nimport * as AC from \"../../redux/actionCreators\"\r\n\r\nconst mapStateToProps = (state) => {\r\n\tlet exchange = state.exchangeComponent\r\n\treturn {\r\n\t\tamountFrom: exchange.amountFrom,\r\n\t\tcurrencyFrom: exchange.currencyFrom,\r\n\t\tcurrencyTo: exchange.currencyTo,\r\n\t\tamountTo: exchange.amountTo,\r\n\t\tdata: exchange.data,\r\n\t\tendAt: exchange.endAt,\r\n\t\tstartAt: exchange.startAt,\r\n\t\tgraph: exchange.graph,\r\n\t\tsetGraph: exchange.setGraph\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tinputAmountFrom: (amountFrom) => {\r\n\t\t\tdispatch(AC.inputAmountFromAC(amountFrom))\r\n\t\t},\r\n\t\tinputCurrencyFrom: (currencyFrom) => {\r\n\t\t\tdispatch(AC.inputCurrencyFromAC(currencyFrom))\r\n\t\t},\r\n\t\toutputCurrencyTo: (currencyTo) => {\r\n\t\t\tdispatch(AC.outputCurrencyToAC(currencyTo))\r\n\t\t},\r\n\t\toutputAmountTo: (data) => {\r\n\t\t\tdispatch(AC.outputAmountToAC(data))\r\n\t\t},\r\n\t\tchangeCurrencies: () => {\r\n\t\t\tdispatch(AC.changeCurrenciesAC())\r\n\t\t},\r\n\t\tsetGraph: (data) => {\r\n\t\t\tdispatch(AC.setGraphAC(data))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Exchange)","import * as actions from \"./actions\"\r\n\r\nexport const inputAmountFromAC = (amountFrom) => ({type: actions.INPUT_AMOUNT_FROM, amountFrom})\r\nexport const inputCurrencyFromAC = (currencyFrom) => ({type: actions.INPUT_CURRENCY_FROM, currencyFrom})\r\nexport const outputCurrencyToAC = (currencyTo) => ({type: actions.OUTPUT_CURRENCY_TO, currencyTo})\r\nexport const outputAmountToAC = (data) => ({type: actions.OUTPUT_AMOUNT_TO, data})\r\n\r\nexport const changeCurrenciesAC = () => ({type: actions.CHANGE_CURRENCIES})\r\n\r\nexport const setGraphAC = (data) => ({type: actions.SET_GRAPH, data})","import React from 'react'\r\nimport ExchangeContainer from '../Exchange/ExchangeContainer'\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ExchangeContainer />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\"\nimport App from './components/App/App'\n\n\nrender(\n\t<Provider store={store}>\n\t\t<App/>\n\t</Provider>, document.getElementById('root'))"],"sourceRoot":""}